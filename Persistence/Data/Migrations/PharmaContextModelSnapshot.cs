// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(PharmaContext))]
    partial class PharmaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Inventory.CInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdPresTypeFk")
                        .HasColumnType("int");

                    b.Property<int>("IdProductFk")
                        .HasColumnType("int");

                    b.Property<int>("MaxStock")
                        .HasColumnType("int");

                    b.Property<int>("MinStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPresTypeFk");

                    b.HasIndex("IdProductFk");

                    b.ToTable("inventory", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Inventory.InventoryManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IdMoveTypeFk")
                        .HasColumnType("int");

                    b.Property<int>("IdPayMethodFk")
                        .HasColumnType("int");

                    b.Property<int>("IdPersReciFk")
                        .HasColumnType("int");

                    b.Property<int>("IdPersSellerFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IdMoveTypeFk");

                    b.HasIndex("IdPayMethodFk");

                    b.HasIndex("IdPersReciFk");

                    b.HasIndex("IdPersSellerFk");

                    b.ToTable("inventorymanagement", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Location.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdDepartFk")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartFk");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Location.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Location.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdCountryFk")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdCountryFk");

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Management.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CurrentInvoice")
                        .HasColumnType("int");

                    b.Property<int>("FinalInvoice")
                        .HasColumnType("int");

                    b.Property<int>("InitialInvoice")
                        .HasColumnType("int");

                    b.Property<int>("ResolutionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("invoice", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Management.MovementDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdInventManagFk")
                        .HasColumnType("int");

                    b.Property<int>("IdInventoryFk")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<short>("QuantityUnits")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IdInventManagFk");

                    b.HasIndex("IdInventoryFk");

                    b.ToTable("movementdetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Management.MovementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("movementtype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Management.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("paymentmethod", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Person.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bis")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Cardinal")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Complement")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstLetter")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<short>("FirstNumber")
                        .HasColumnType("smallint");

                    b.Property<int>("IdCityFk")
                        .HasColumnType("int");

                    b.Property<int>("IdPersonFk")
                        .HasColumnType("int");

                    b.Property<string>("RoadType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecondCardinal")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("SecondLetter")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<short>("SecondNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("ThirdLetter")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<short>("ThirdNumber")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IdCityFk");

                    b.HasIndex("IdPersonFk");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Person.CPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("IdDocuTypeFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRolePersonFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTypePersonFk")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("RegistreDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IdDocuTypeFk");

                    b.HasIndex("IdRolePersonFk");

                    b.HasIndex("IdTypePersonFk");

                    b.ToTable("person", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Person.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("documenttype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Person.PersonContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdPersonFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeContactFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPersonFk");

                    b.HasIndex("IdTypeContactFk");

                    b.ToTable("personcontact", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Person.RolePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("roleperson", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Person.TypeContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("typecontact", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Person.TypePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("typeperson", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Product.CProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("IdProdBrandFk")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IdProdBrandFk");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Product.PresentationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("presentationtype", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("productbrand", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserAuthen.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int>("UserIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserIdFk");

                    b.ToTable("refreshToken", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserAuthen.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("rolName");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserAuthen.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("userName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserAuthen.UserRol", b =>
                {
                    b.Property<int>("UserIdFk")
                        .HasColumnType("int");

                    b.Property<int>("RolIdFk")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserIdFk", "RolIdFk");

                    b.HasIndex("RolIdFk");

                    b.ToTable("userRol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Inventory.CInventory", b =>
                {
                    b.HasOne("Domain.Entities.Product.PresentationType", "PresentationTypes")
                        .WithMany("Inventories")
                        .HasForeignKey("IdPresTypeFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.CProduct", "Products")
                        .WithMany("Inventories")
                        .HasForeignKey("IdProductFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PresentationTypes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Inventory.InventoryManagement", b =>
                {
                    b.HasOne("Domain.Entities.Management.MovementType", "MovementTypes")
                        .WithMany("InventoryManagements")
                        .HasForeignKey("IdMoveTypeFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Management.PaymentMethod", "PaymentMethods")
                        .WithMany("InventoryManagements")
                        .HasForeignKey("IdPayMethodFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person.CPerson", "PeopleReceive")
                        .WithMany("InventoryManagementsSeller")
                        .HasForeignKey("IdPersReciFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person.CPerson", "PeopleSellers")
                        .WithMany("InventoryManagementsReci")
                        .HasForeignKey("IdPersSellerFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovementTypes");

                    b.Navigation("PaymentMethods");

                    b.Navigation("PeopleReceive");

                    b.Navigation("PeopleSellers");
                });

            modelBuilder.Entity("Domain.Entities.Location.City", b =>
                {
                    b.HasOne("Domain.Entities.Location.Department", "Department")
                        .WithMany("Cities")
                        .HasForeignKey("IdDepartFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Entities.Location.Department", b =>
                {
                    b.HasOne("Domain.Entities.Location.Country", "Countries")
                        .WithMany("Departments")
                        .HasForeignKey("IdCountryFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Domain.Entities.Management.MovementDetail", b =>
                {
                    b.HasOne("Domain.Entities.Inventory.InventoryManagement", "InventoryManagements")
                        .WithMany("MovementDetails")
                        .HasForeignKey("IdInventManagFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Inventory.CInventory", "Inventories")
                        .WithMany("MovementDetails")
                        .HasForeignKey("IdInventoryFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventories");

                    b.Navigation("InventoryManagements");
                });

            modelBuilder.Entity("Domain.Entities.Person.Address", b =>
                {
                    b.HasOne("Domain.Entities.Location.City", "Cities")
                        .WithMany("Addresses")
                        .HasForeignKey("IdCityFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person.CPerson", "People")
                        .WithMany("Addresses")
                        .HasForeignKey("IdPersonFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cities");

                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entities.Person.CPerson", b =>
                {
                    b.HasOne("Domain.Entities.Person.DocumentType", "DocumentTypes")
                        .WithMany("People")
                        .HasForeignKey("IdDocuTypeFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person.RolePerson", "RolePeople")
                        .WithMany("People")
                        .HasForeignKey("IdRolePersonFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person.TypePerson", "TypePeople")
                        .WithMany("People")
                        .HasForeignKey("IdTypePersonFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentTypes");

                    b.Navigation("RolePeople");

                    b.Navigation("TypePeople");
                });

            modelBuilder.Entity("Domain.Entities.Person.PersonContact", b =>
                {
                    b.HasOne("Domain.Entities.Person.CPerson", "People")
                        .WithMany("PersonContacts")
                        .HasForeignKey("IdPersonFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person.TypeContact", "TypeContacts")
                        .WithMany("PersonContacts")
                        .HasForeignKey("IdTypeContactFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("People");

                    b.Navigation("TypeContacts");
                });

            modelBuilder.Entity("Domain.Entities.Product.CProduct", b =>
                {
                    b.HasOne("Domain.Entities.Product.ProductBrand", "ProductBrands")
                        .WithMany("Products")
                        .HasForeignKey("IdProdBrandFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductBrands");
                });

            modelBuilder.Entity("Domain.Entities.UserAuthen.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.UserAuthen.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserAuthen.UserRol", b =>
                {
                    b.HasOne("Domain.Entities.UserAuthen.Rol", "Rol")
                        .WithMany("UserRols")
                        .HasForeignKey("RolIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserAuthen.User", "User")
                        .WithMany("UserRols")
                        .HasForeignKey("UserIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Inventory.CInventory", b =>
                {
                    b.Navigation("MovementDetails");
                });

            modelBuilder.Entity("Domain.Entities.Inventory.InventoryManagement", b =>
                {
                    b.Navigation("MovementDetails");
                });

            modelBuilder.Entity("Domain.Entities.Location.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Entities.Location.Country", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Domain.Entities.Location.Department", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Management.MovementType", b =>
                {
                    b.Navigation("InventoryManagements");
                });

            modelBuilder.Entity("Domain.Entities.Management.PaymentMethod", b =>
                {
                    b.Navigation("InventoryManagements");
                });

            modelBuilder.Entity("Domain.Entities.Person.CPerson", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("InventoryManagementsReci");

                    b.Navigation("InventoryManagementsSeller");

                    b.Navigation("PersonContacts");
                });

            modelBuilder.Entity("Domain.Entities.Person.DocumentType", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entities.Person.RolePerson", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entities.Person.TypeContact", b =>
                {
                    b.Navigation("PersonContacts");
                });

            modelBuilder.Entity("Domain.Entities.Person.TypePerson", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entities.Product.CProduct", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Domain.Entities.Product.PresentationType", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Domain.Entities.Product.ProductBrand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.UserAuthen.Rol", b =>
                {
                    b.Navigation("UserRols");
                });

            modelBuilder.Entity("Domain.Entities.UserAuthen.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRols");
                });
#pragma warning restore 612, 618
        }
    }
}
